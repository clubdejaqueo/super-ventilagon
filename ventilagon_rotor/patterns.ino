// Precalculated transformations
// 64 row combinations
// times 6 possible rotations
// times 2 mirrored options = 768 bytes

const unsigned char PROGMEM transformations[] = {
  // Mirrored: no
  // Rotated: 0
  0b000000, 0b000001, 0b000010, 0b000011, 0b000100, 0b000101, 0b000110, 0b000111, 0b001000, 0b001001, 0b001010, 0b001011, 0b001100, 0b001101, 0b001110, 0b001111, 0b010000, 0b010001, 0b010010, 0b010011, 0b010100, 0b010101, 0b010110, 0b010111, 0b011000, 0b011001, 0b011010, 0b011011, 0b011100, 0b011101, 0b011110, 0b011111, 0b100000, 0b100001, 0b100010, 0b100011, 0b100100, 0b100101, 0b100110, 0b100111, 0b101000, 0b101001, 0b101010, 0b101011, 0b101100, 0b101101, 0b101110, 0b101111, 0b110000, 0b110001, 0b110010, 0b110011, 0b110100, 0b110101, 0b110110, 0b110111, 0b111000, 0b111001, 0b111010, 0b111011, 0b111100, 0b111101, 0b111110, 0b111111,
  // Rotated: 1
  0b000000, 0b000010, 0b000100, 0b000110, 0b001000, 0b001010, 0b001100, 0b001110, 0b010000, 0b010010, 0b010100, 0b010110, 0b011000, 0b011010, 0b011100, 0b011110, 0b100000, 0b100010, 0b100100, 0b100110, 0b101000, 0b101010, 0b101100, 0b101110, 0b110000, 0b110010, 0b110100, 0b110110, 0b111000, 0b111010, 0b111100, 0b111110, 0b000001, 0b000011, 0b000101, 0b000111, 0b001001, 0b001011, 0b001101, 0b001111, 0b010001, 0b010011, 0b010101, 0b010111, 0b011001, 0b011011, 0b011101, 0b011111, 0b100001, 0b100011, 0b100101, 0b100111, 0b101001, 0b101011, 0b101101, 0b101111, 0b110001, 0b110011, 0b110101, 0b110111, 0b111001, 0b111011, 0b111101, 0b111111,
  // Rotated: 2
  0b000000, 0b000100, 0b001000, 0b001100, 0b010000, 0b010100, 0b011000, 0b011100, 0b100000, 0b100100, 0b101000, 0b101100, 0b110000, 0b110100, 0b111000, 0b111100, 0b000001, 0b000101, 0b001001, 0b001101, 0b010001, 0b010101, 0b011001, 0b011101, 0b100001, 0b100101, 0b101001, 0b101101, 0b110001, 0b110101, 0b111001, 0b111101, 0b000010, 0b000110, 0b001010, 0b001110, 0b010010, 0b010110, 0b011010, 0b011110, 0b100010, 0b100110, 0b101010, 0b101110, 0b110010, 0b110110, 0b111010, 0b111110, 0b000011, 0b000111, 0b001011, 0b001111, 0b010011, 0b010111, 0b011011, 0b011111, 0b100011, 0b100111, 0b101011, 0b101111, 0b110011, 0b110111, 0b111011, 0b111111,
  // Rotated: 3
  0b000000, 0b001000, 0b010000, 0b011000, 0b100000, 0b101000, 0b110000, 0b111000, 0b000001, 0b001001, 0b010001, 0b011001, 0b100001, 0b101001, 0b110001, 0b111001, 0b000010, 0b001010, 0b010010, 0b011010, 0b100010, 0b101010, 0b110010, 0b111010, 0b000011, 0b001011, 0b010011, 0b011011, 0b100011, 0b101011, 0b110011, 0b111011, 0b000100, 0b001100, 0b010100, 0b011100, 0b100100, 0b101100, 0b110100, 0b111100, 0b000101, 0b001101, 0b010101, 0b011101, 0b100101, 0b101101, 0b110101, 0b111101, 0b000110, 0b001110, 0b010110, 0b011110, 0b100110, 0b101110, 0b110110, 0b111110, 0b000111, 0b001111, 0b010111, 0b011111, 0b100111, 0b101111, 0b110111, 0b111111,
  // Rotated: 4
  0b000000, 0b010000, 0b100000, 0b110000, 0b000001, 0b010001, 0b100001, 0b110001, 0b000010, 0b010010, 0b100010, 0b110010, 0b000011, 0b010011, 0b100011, 0b110011, 0b000100, 0b010100, 0b100100, 0b110100, 0b000101, 0b010101, 0b100101, 0b110101, 0b000110, 0b010110, 0b100110, 0b110110, 0b000111, 0b010111, 0b100111, 0b110111, 0b001000, 0b011000, 0b101000, 0b111000, 0b001001, 0b011001, 0b101001, 0b111001, 0b001010, 0b011010, 0b101010, 0b111010, 0b001011, 0b011011, 0b101011, 0b111011, 0b001100, 0b011100, 0b101100, 0b111100, 0b001101, 0b011101, 0b101101, 0b111101, 0b001110, 0b011110, 0b101110, 0b111110, 0b001111, 0b011111, 0b101111, 0b111111,
  // Rotated: 5
  0b000000, 0b100000, 0b000001, 0b100001, 0b000010, 0b100010, 0b000011, 0b100011, 0b000100, 0b100100, 0b000101, 0b100101, 0b000110, 0b100110, 0b000111, 0b100111, 0b001000, 0b101000, 0b001001, 0b101001, 0b001010, 0b101010, 0b001011, 0b101011, 0b001100, 0b101100, 0b001101, 0b101101, 0b001110, 0b101110, 0b001111, 0b101111, 0b010000, 0b110000, 0b010001, 0b110001, 0b010010, 0b110010, 0b010011, 0b110011, 0b010100, 0b110100, 0b010101, 0b110101, 0b010110, 0b110110, 0b010111, 0b110111, 0b011000, 0b111000, 0b011001, 0b111001, 0b011010, 0b111010, 0b011011, 0b111011, 0b011100, 0b111100, 0b011101, 0b111101, 0b011110, 0b111110, 0b011111, 0b111111,
  // Mirrored: yes
  // Rotated: 0
  0b000000, 0b100000, 0b010000, 0b110000, 0b001000, 0b101000, 0b011000, 0b111000, 0b000100, 0b100100, 0b010100, 0b110100, 0b001100, 0b101100, 0b011100, 0b111100, 0b000010, 0b100010, 0b010010, 0b110010, 0b001010, 0b101010, 0b011010, 0b111010, 0b000110, 0b100110, 0b010110, 0b110110, 0b001110, 0b101110, 0b011110, 0b111110, 0b000001, 0b100001, 0b010001, 0b110001, 0b001001, 0b101001, 0b011001, 0b111001, 0b000101, 0b100101, 0b010101, 0b110101, 0b001101, 0b101101, 0b011101, 0b111101, 0b000011, 0b100011, 0b010011, 0b110011, 0b001011, 0b101011, 0b011011, 0b111011, 0b000111, 0b100111, 0b010111, 0b110111, 0b001111, 0b101111, 0b011111, 0b111111,
  // Rotated: 1
  0b000000, 0b010000, 0b001000, 0b011000, 0b000100, 0b010100, 0b001100, 0b011100, 0b000010, 0b010010, 0b001010, 0b011010, 0b000110, 0b010110, 0b001110, 0b011110, 0b000001, 0b010001, 0b001001, 0b011001, 0b000101, 0b010101, 0b001101, 0b011101, 0b000011, 0b010011, 0b001011, 0b011011, 0b000111, 0b010111, 0b001111, 0b011111, 0b100000, 0b110000, 0b101000, 0b111000, 0b100100, 0b110100, 0b101100, 0b111100, 0b100010, 0b110010, 0b101010, 0b111010, 0b100110, 0b110110, 0b101110, 0b111110, 0b100001, 0b110001, 0b101001, 0b111001, 0b100101, 0b110101, 0b101101, 0b111101, 0b100011, 0b110011, 0b101011, 0b111011, 0b100111, 0b110111, 0b101111, 0b111111,
  // Rotated: 2
  0b000000, 0b001000, 0b000100, 0b001100, 0b000010, 0b001010, 0b000110, 0b001110, 0b000001, 0b001001, 0b000101, 0b001101, 0b000011, 0b001011, 0b000111, 0b001111, 0b100000, 0b101000, 0b100100, 0b101100, 0b100010, 0b101010, 0b100110, 0b101110, 0b100001, 0b101001, 0b100101, 0b101101, 0b100011, 0b101011, 0b100111, 0b101111, 0b010000, 0b011000, 0b010100, 0b011100, 0b010010, 0b011010, 0b010110, 0b011110, 0b010001, 0b011001, 0b010101, 0b011101, 0b010011, 0b011011, 0b010111, 0b011111, 0b110000, 0b111000, 0b110100, 0b111100, 0b110010, 0b111010, 0b110110, 0b111110, 0b110001, 0b111001, 0b110101, 0b111101, 0b110011, 0b111011, 0b110111, 0b111111,
  // Rotated: 3
  0b000000, 0b000100, 0b000010, 0b000110, 0b000001, 0b000101, 0b000011, 0b000111, 0b100000, 0b100100, 0b100010, 0b100110, 0b100001, 0b100101, 0b100011, 0b100111, 0b010000, 0b010100, 0b010010, 0b010110, 0b010001, 0b010101, 0b010011, 0b010111, 0b110000, 0b110100, 0b110010, 0b110110, 0b110001, 0b110101, 0b110011, 0b110111, 0b001000, 0b001100, 0b001010, 0b001110, 0b001001, 0b001101, 0b001011, 0b001111, 0b101000, 0b101100, 0b101010, 0b101110, 0b101001, 0b101101, 0b101011, 0b101111, 0b011000, 0b011100, 0b011010, 0b011110, 0b011001, 0b011101, 0b011011, 0b011111, 0b111000, 0b111100, 0b111010, 0b111110, 0b111001, 0b111101, 0b111011, 0b111111,
  // Rotated: 4
  0b000000, 0b000010, 0b000001, 0b000011, 0b100000, 0b100010, 0b100001, 0b100011, 0b010000, 0b010010, 0b010001, 0b010011, 0b110000, 0b110010, 0b110001, 0b110011, 0b001000, 0b001010, 0b001001, 0b001011, 0b101000, 0b101010, 0b101001, 0b101011, 0b011000, 0b011010, 0b011001, 0b011011, 0b111000, 0b111010, 0b111001, 0b111011, 0b000100, 0b000110, 0b000101, 0b000111, 0b100100, 0b100110, 0b100101, 0b100111, 0b010100, 0b010110, 0b010101, 0b010111, 0b110100, 0b110110, 0b110101, 0b110111, 0b001100, 0b001110, 0b001101, 0b001111, 0b101100, 0b101110, 0b101101, 0b101111, 0b011100, 0b011110, 0b011101, 0b011111, 0b111100, 0b111110, 0b111101, 0b111111,
  // Rotated: 5
  0b000000, 0b000001, 0b100000, 0b100001, 0b010000, 0b010001, 0b110000, 0b110001, 0b001000, 0b001001, 0b101000, 0b101001, 0b011000, 0b011001, 0b111000, 0b111001, 0b000100, 0b000101, 0b100100, 0b100101, 0b010100, 0b010101, 0b110100, 0b110101, 0b001100, 0b001101, 0b101100, 0b101101, 0b011100, 0b011101, 0b111100, 0b111101, 0b000010, 0b000011, 0b100010, 0b100011, 0b010010, 0b010011, 0b110010, 0b110011, 0b001010, 0b001011, 0b101010, 0b101011, 0b011010, 0b011011, 0b111010, 0b111011, 0b000110, 0b000111, 0b100110, 0b100111, 0b010110, 0b010111, 0b110110, 0b110111, 0b001110, 0b001111, 0b101110, 0b101111, 0b011110, 0b011111, 0b111110, 0b111111,
};

// 20 rows
const unsigned char PROGMEM pat0[] = {
  0B000000, 0B000000, 0B000000, 0B000000,
  0B100111, 0B100111, 0B100111, 0B100111,
  0B110011, 0B110011, 0B110011, 0B110011,
  0B111001, 0B111001, 0B111001, 0B111001,
  0B111100, 0B111100, 0B111100, 0B111100,
  0B011110, 0B011110, 0B011110, 0B011110,
  0B001111, 0B001111, 0B001111, 0B001111,
  0B100111, 0B100111, 0B100111, 0B100111,
  0B110011, 0B110011, 0B110011, 0B110011,
  0B111001, 0B111001, 0B111001, 0B111001,
  0B111100, 0B111100, 0B111100, 0B111100,
  0B011110, 0B011110, 0B011110, 0B011110,
  0B001111, 0B001111, 0B001111, 0B001111,
  0B100111, 0B100111, 0B100111, 0B100111,
  0B110011, 0B110011, 0B110011, 0B110011,
  0B111001, 0B111001, 0B111001, 0B111001,
  0B111100, 0B111100, 0B111100, 0B111100,
  0B011110, 0B011110, 0B011110, 0B011110,
  0B001111, 0B001111, 0B001111, 0B001111,
  0B000000, 0B000000, 0B000000, 0B000000,
};

// 12 rows
const unsigned char PROGMEM pat1[] = {
  0B000000, 0B000000, 0B000000, 0B000000,
  0B101111, 0B101111, 0B101111, 0B101111,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B111101, 0B111101, 0B111101, 0B111101,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B101111, 0B101111, 0B101111, 0B101111,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
};

// 11 rows
const unsigned char PROGMEM pat2[] = {
  0B000000, 0B000000, 0B000000, 0B000000,
  0B110110, 0B110110, 0B110110, 0B110110,
  0B010010, 0B010010, 0B010010, 0B010010,
  0B011011, 0B011011, 0B011011, 0B011011,
  0B010010, 0B010010, 0B010010, 0B010010,
  0B110110, 0B110110, 0B110110, 0B110110,
  0B010010, 0B010010, 0B010010, 0B010010,
  0B011011, 0B011011, 0B011011, 0B011011,
  0B010010, 0B010010, 0B010010, 0B010010,
  0B110110, 0B110110, 0B110110, 0B110110,
  0B000000, 0B000000, 0B000000, 0B000000,
};

// 10 rows
const unsigned char PROGMEM pat3[] = {
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B010010, 0B010010, 0B010010, 0B010010,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B101010, 0B101010, 0B101010, 0B101010,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B010101, 0B010101, 0B010101, 0B010101,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B101110, 0B101110, 0B101110, 0B101110,
  0B000000, 0B000000, 0B000000, 0B000000,
};

// 9 rows
const unsigned char PROGMEM pat4[] = {
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000001, 0B000001, 0B000001, 0B000001,
  0B000010, 0B000010, 0B000010, 0B000010,
  0B000100, 0B000100, 0B000100, 0B000100,
  0B001000, 0B001000, 0B001000, 0B001000,
  0B010000, 0B010000, 0B010000, 0B010000,
  0B100000, 0B100000, 0B100000, 0B100000,
  0B000000, 0B000000, 0B000000, 0B000000,
  0B000000, 0B000000, 0B000000, 0B000000,
};


class BasePattern {
  public:
    byte len;
    const unsigned char PROGMEM* rows;

    BasePattern(byte len, const unsigned char PROGMEM* rows) : len(len), rows(rows) {
    }

    inline byte get_row(byte offset) const {
      return pgm_read_byte(rows + offset);
    }
};

BasePattern all_patterns[] = {
  BasePattern(sizeof(pat0), pat0),
  BasePattern(sizeof(pat1), pat1),
  BasePattern(sizeof(pat2), pat2),
  BasePattern(sizeof(pat3), pat3),
  BasePattern(sizeof(pat4), pat4),
};

Pattern::Pattern() : base(all_patterns[0]) {
}

void Pattern::randomize(int level) {
  transformation_base = transformations + (random(0, 12) << 6);
  base = all_patterns[random(0, elements_in(all_patterns))];
}

unsigned char Pattern::transform(unsigned char b) {
  return pgm_read_byte(transformation_base + b);
}

unsigned char Pattern::get_row(int row) {
  return transform(base.get_row(row));
}

int Pattern::len() {
  return base.len;
}
